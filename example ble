import asyncio
import bleak

from kivy.app import App

# from kivy.core.window import Window
from kivy.uix.label import Label
from kivy.uix.scrollview import ScrollView
from kivy.uix.button import Button

# bind bleak's python logger into kivy's logger before importing python module using logging
from kivy.logger import Logger
import logging

logging.Logger.manager.root = Logger


class ExampleApp(App):
    def __init__(self):
        super().__init__()
        self.label = None
        self.running = True

    def build(self):
        self.scrollview = ScrollView(do_scroll_x=False, scroll_type=["bars", "content"])
        self.label = Label(font_size="10sp")
        self.scrollview.add_widget(self.label)
        return self.scrollview

    def line(self, text, empty=False):
        Logger.info("example:" + text)
        if self.label is None:
            return
        text += "\n"
        if empty:
            self.label.text = text
        else:
            self.label.text += text

    def on_stop(self):
        self.running = False

    async def example(self):
        while self.running:
            try:
                self.line("scanning")
                scanned_devices = await bleak.BleakScanner.discover(1)
                self.line("scanned", True)

                if len(scanned_devices) == 0:
                    raise bleak.exc.BleakError("no devices found")

                scanned_devices.sort(key=lambda device: -device.rssi)

                for device in scanned_devices:
                    self.line(f"{device.name} ({device.address})")

                for device in scanned_devices:
                    self.line(f"Connecting to {device.name} ...")
                    try:
                        async with bleak.BleakClient(device) as client:
                            for service in client.services:
                                self.line(f"  service {service.uuid}")
                                for characteristic in service.characteristics:
                                    self.line(
                                        f"  characteristic {characteristic.uuid} {hex(characteristic.handle)} ({len(characteristic.descriptors)} descriptors)"
                                    )
                    except bleak.exc.BleakError as e:
                        self.line(f"  error {e}")
                        await asyncio.sleep(10)
            except bleak.exc.BleakError as e:
                self.line(f"ERROR {e}")
                await asyncio.sleep(1)
        self.line("example loop terminated", True)


async def main(app):
    await asyncio.gather(app.async_run("asyncio"), app.example())


if __name__ == "__main__":
    Logger.setLevel(logging.DEBUG)

    # app running on one thread with two async coroutines
    app = ExampleApp()
    asyncio.run(main(app))


import asyncio
import time
import schedule
import bleak
import nest_asyncio
import asyncgui
import asynckivy as ak
from kivy.app import App

from kivy.uix.label import Label
from kivy.uix.gridlayout import GridLayout
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.scrollview import ScrollView
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.core.window import Window
from kivy.uix.button import Button
from bleak import BleakScanner
from bleak import BleakClient



def test(mac: str,sm) -> None:
    def inner(btn) -> None:
        print('Called!', mac)
        sm.current = mac
    return inner


class MainApp(App):

    def build(self):
        global lyt, sm
        sm = ScreenManager()
        screen1 = Screen(name = 'main')
        lyt = GridLayout(cols = 1, spacing = 10 , size_hint_y = None)
        lyt.bind(minimum_height=lyt.setter('height'))
        bts = Button(text = 'SCAN', size_hint_y = None, height = 150, size_hint_x = 1,
                     color = (0, 2, 0, 1), background_color = (0, 0, 205, 1))
        bts.on_release = lambda: asyncio.run(self.scan())
        root = ScrollView(size_hint=(1, None), size=(Window.width, Window.height), bar_width=8,
                          bar_color=[100, 0, 0, 0.9], bar_inactive_color=[0, 100, 0, 0.9])
        root.add_widget(lyt)
        screen1.add_widget(root)
        screen1.add_widget(bts)
        sm.add_widget(screen1)
        print(sm.screen_names)
        return sm

    async def scan(self):
        scanned_devices = await BleakScanner.discover()
        print('Scanned devices: ', scanned_devices)
        if len(scanned_devices) == 0:
            dev = Button(text = 'Устройства не обнаружены', size_hint_y = None, height = 160, size_hint_x = 1)
            lyt.add_widget(dev)
        else:
            for device in scanned_devices:
                name = str(device.name)
                MAC = str(device.address)
                Btb = Button(text='Back', size_hint_y=None, height=200, size_hint_x=1)
                Btb.on_release = self.back
                lb1 = Label(text=('[size=60]' + '[b]' + name + '[/size]' +'\n' + 'MAC:  ' + '[/b]' + MAC),
                            markup = True)
                Bt1 = Button(text='Connect', size_hint_y = None, height = 300, size_hint_x = 1 )
                Bt1.on_release = lambda: asyncio.run(self.char())
                screen2 = Screen(name = MAC)
                Bxl = BoxLayout(orientation = 'vertical')
                Bxl.add_widget(Btb)
                Bxl.add_widget(lb1)
                Bxl.add_widget(Bt1)
                screen2.add_widget(Bxl)
                sm.add_widget(screen2)
                dev = Button(text=('[size=60]' + '[b]' + name + '[/size]' +'\n' + 'MAC:  ' + '[/b]' + MAC),
                             markup = True, size_hint_y = None, height = 300, size_hint_x = 1,
                             on_press = test(MAC, sm))
                lyt.add_widget(dev)
        return lyt, sm

    def back(self):
        sm.current = 'main'
        return sm

    def obr(self, read_ch):
        if len(read_ch) > 2:
            read_ch = int(read_ch[1:], 16)
        else:
            read_ch = int(read_ch)
        return read_ch

    async def char(self):
        nest_asyncio.apply()
        MAC = sm.current
        ak.start_soon(self.volt_task())
        screen3 = Screen(name = MAC + '1')
        Btb = Button(text='Back', size_hint_y=None, height=200, size_hint_x=1)
        Btb.on_release = self.back
        Bxl = BoxLayout(orientation='vertical')
        Bxl.add_widget(Btb)
        try:
            async with BleakClient(MAC) as client:
                for service in client.services:
                    print(f"  service {service.uuid}")
                    for characteristic in service.characteristics:
                        print(f"  characteristic {characteristic.uuid} {hex(characteristic.handle)}"
                              f" ({len(characteristic.descriptors)} descriptors)")
                print(f'xgatt_battery_voltage:{self.obr(await client.read_gatt_char("964bfa71-51ae-49ff-98a8-b2f17c129716"))}')
                print(f'xgatt_packet_width_r:{self.obr(await client.read_gatt_char("dc210dd3-c32c-4ea6-a874-1b3c706d7a6e"))}')
                print(f'xgatt_battery_state:{self.obr(await client.read_gatt_char("de479aae-4248-4fb0-95fe-a36527747b6a"))}')
                print(f'xgatt_power_state:{self.obr(await client.read_gatt_char("45462078-e7d5-4604-b376-4d855f949e77"))}')
                print(f'xgatt_impulse_width_r:{self.obr(await client.read_gatt_char("93fb864e-0c35-4a3b-8dcd-59fa47c6d11b"))}')
                print(f'xgatt_impulse current:{self.obr(await client.read_gatt_char("e8a139f3-47e9-4b5a-ba3b-f7e1e73a3fed"))}')
                battery_voltage = str(self.obr(await client.read_gatt_char("964bfa71-51ae-49ff-98a8-b2f17c129716")))
        except bleak.exc.BleakError as e:
            print('error char')
        lb_battery_voltage = Label(text=battery_voltage)
        Bxl.add_widget(lb_battery_voltage)
        screen3.add_widget(Bxl)
        sm.add_widget(screen3)
        sm.current = MAC + '1'

    async def charv(self, loop):
        while True:
            try:
                MAC = "00:07:80:1F:44:DF"
                async with BleakClient(MAC) as client:
                    print(str(self.obr(await client.read_gatt_char("964bfa71-51ae-49ff-98a8-b2f17c129716"))))
                    await ak.sleep(5)
            except bleak.exc.BleakError as e:
                print('error')

    async def volt_task(self):
        dt = await ak.sleep(5)
        print(f'{dt} second have passed')
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        future = asyncio.ensure_future(self.charv(loop))
        loop.run_until_complete(future)
        await ak.sleep(5)


if __name__ == '__main__':
    app = MainApp()
    app.run()
